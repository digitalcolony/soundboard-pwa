(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const n of s.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function t(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerPolicy&&(s.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?s.credentials="include":o.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(o){if(o.ep)return;o.ep=!0;const s=t(o);fetch(o.href,s)}})();window.FALLBACK_SOUNDS=[{name:"1 to 12 hour",artist:"Boca Britany Somers",duration:"0:03",mp3:"/sounds/1-to-12-hour.mp3"},{name:"2 of the Dumbest",artist:"Mike Reineri",duration:"0:07",mp3:"/sounds/2-of-the-Dumbest-White-Men.mp3"},{name:"A Lot of Spooks",artist:"Denis Potvin",duration:"0:02",mp3:"/sounds/A-Lot-of-Spooks-in-New-Jersey.mp3"},{name:"A Stench of Cow Manure...",artist:"Jim Mandich",duration:"0:08",mp3:"/sounds/A-Stench-of-Cow-Manure.mp3"},{name:"A lot of masturbation",artist:"Jim Mandich",duration:"0:02",mp3:"/sounds/A-lot-of-masturbation-went-on.mp3"},{name:"About 30 Man",artist:"Fake Ol' Dirty Bastard",duration:"0:01",mp3:"/sounds/About-30-man.mp3"},{name:"Absolutely",artist:"Moe Howard",duration:"0:01",mp3:"/sounds/Absolutely.mp3"},{name:"Absolutely Correct Sir",artist:"Bridgetender",duration:"0:02",mp3:"/sounds/Absolutely-Correct-Sir.mp3"},{name:"All the Crap",artist:"Neil Rogers",duration:"0:02",mp3:"/sounds/All-the-Crap.mp3"},{name:"Another break already?",artist:"Neil Rogers",duration:"0:02",mp3:"/sounds/Another-break-already_Q.mp3"},{name:"Anybody have a heart or a liver",artist:"Neil Rogers",duration:"0:03",mp3:"/sounds/Anybody-have-a-heart-or-a-liver.mp3"},{name:"Are You Sure",artist:"Neil Rogers",duration:"0:01",mp3:"/sounds/Are-You-Sure.mp3"},{name:"Awright",artist:"Neil Rogers",duration:"0:01",mp3:"/sounds/Awright.mp3"},{name:"Ayayayayayayayay!",artist:"Neil Rogers",duration:"0:02",mp3:"/sounds/Ayayayayayayayay!.mp3"},{name:"Big O Jingle",artist:"Neil Rogers",duration:"0:05",mp3:"/sounds/Big-O-Jingle.mp3"},{name:"Bop Bop Bop",artist:"Neil Rogers",duration:"0:02",mp3:"/sounds/Bop-Bop-Bop.mp3"},{name:"Bring Neil Back",artist:"Fan",duration:"0:03",mp3:"/sounds/Bring-Neil-Back.mp3"},{name:"Burp",artist:"Neil Rogers",duration:"0:01",mp3:"/sounds/Burp.mp3"},{name:"Bye Bye Bye",artist:"Neil Rogers",duration:"0:02",mp3:"/sounds/Bye-Bye-Bye.mp3"},{name:"Crap",artist:"Neil Rogers",duration:"0:01",mp3:"/sounds/Crap.mp3"}];class c{constructor(){this.sounds=[],this.filteredSounds=[],this.searchQuery="",this.isOnline=navigator.onLine,this.init()}async init(){if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/sw.js");console.log("Service Worker registered:",e),e.addEventListener("updatefound",()=>{const t=e.installing;t.addEventListener("statechange",()=>{t.state==="installed"&&navigator.serviceWorker.controller&&this.showStatus("♫ NEW SOUNDS AVAILABLE! REFRESH TO UPDATE ♫","success")})})}catch(e){console.error("Service Worker registration failed:",e)}"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",e=>{if(e.data&&e.data.type==="AUDIO_CACHED"){const t=e.data.url,r=new URL(t).pathname;console.log("📢 Service worker notified: Audio cached -",r),this.updateSoundCacheStatus(r,!0)}}),this.setupEventListeners(),await this.loadSounds(),window.addEventListener("online",()=>{this.isOnline=!0,this.hideOfflineIndicator(),this.checkForUpdates()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.showOfflineIndicator()}),this.isOnline||this.showOfflineIndicator()}setupEventListeners(){const e=document.getElementById("search-input");e.addEventListener("input",t=>{this.searchQuery=t.target.value,this.filterSounds()}),document.addEventListener("keydown",t=>{(t.key==="s"||t.key==="S")&&document.activeElement!==e&&(t.preventDefault(),e.focus(),e.scrollIntoView({behavior:"smooth",block:"center"}))})}async loadSounds(){try{const e=await this.getCachedSounds();if(e&&e.length>0&&(console.log(`📦 Loaded ${e.length} sounds from cache`),this.sounds=e,await this.renderSounds()),this.isOnline){const t=["/api/sounds.json","/public/api/sounds.json"];let r=!1;for(const o of t)try{console.log(`🌐 Trying to fetch from ${o}...`);const s=await fetch(o);if(console.log(`📡 Response from ${o}:`,s.status,s.ok),s.ok){const n=await s.json();this.sounds=n.files||n,this.cacheSounds(this.sounds),await this.renderSounds(),this.preCachePopularSounds(),r=!0,console.log(`✅ Loaded ${this.sounds.length} sounds from ${o}`);break}}catch(s){console.log(`❌ Failed to load from ${o}:`,s)}r||console.warn("⚠️ Could not load sounds from any API endpoint, using cached or fallback data")}}catch(e){console.error("💥 Error loading sounds:",e),await this.loadFallbackSounds()}}async getCachedSounds(){try{const e=localStorage.getItem("soundboard-data");return e?JSON.parse(e):null}catch(e){return console.error("Error reading cached sounds:",e),null}}cacheSounds(e){try{localStorage.setItem("soundboard-data",JSON.stringify(e)),localStorage.setItem("soundboard-data-timestamp",Date.now().toString())}catch(t){console.error("Error caching sounds:",t)}}async loadFallbackSounds(){this.sounds=window.FALLBACK_SOUNDS||[],await this.renderSounds()}async filterSounds(){if(!this.searchQuery.trim())this.filteredSounds=[...this.sounds];else{const e=this.searchQuery.toLowerCase();this.filteredSounds=this.sounds.filter(t=>t.name.toLowerCase().includes(e)||t.artist.toLowerCase().includes(e))}await this.renderSounds()}async renderSounds(){const e=document.getElementById("sounds-container"),t=document.getElementById("sound-count");if(!this.filteredSounds.length&&this.searchQuery){e.innerHTML=`
                <div class="loading">
                    ✗ NO SOUNDS FOUND FOR "${this.searchQuery}" ✗
                </div>
            `;return}if(!this.sounds.length){e.innerHTML=`
                <div class="loading">
                    ${this.isOnline?"⟡ LOADING SOUNDS...":"✗ NO SOUNDS AVAILABLE OFFLINE ✗"}
                </div>
            `;return}const r=this.filteredSounds.length?this.filteredSounds:this.sounds;r.sort((n,a)=>n.name.localeCompare(a.name)),t.textContent=this.sounds.length;const o=await this.checkCachedSounds(),s=r.map(n=>{const a=o.find(d=>d.mp3===n.mp3);return{...n,isCached:(a==null?void 0:a.isCached)||!1}});e.innerHTML=s.map(n=>`
            <button 
                class="sound-button ${n.isCached?"cached":""}" 
                data-sound='${JSON.stringify(n).replace(/'/g,"&apos;")}'
                title="${this.escapeHtml(n.artist)}${n.isCached?" (Cached for offline)":""}"
            >
                <div class="sound-name">${this.escapeHtml(n.name)}</div>
                <div class="sound-artist">${this.escapeHtml(n.artist)}</div>
            </button>
        `).join(""),e.querySelectorAll(".sound-button").forEach(n=>{n.addEventListener("click",a=>{const d=JSON.parse(a.currentTarget.dataset.sound);this.playSound(d)})})}async playSound(e){try{console.log("🎵 Playing sound:",e.mp3);const t=await fetch(e.mp3);if(!t.ok)throw new Error(`Failed to fetch audio: ${t.status}`);const r=await t.blob(),o=URL.createObjectURL(r),s=new Audio(o);s.addEventListener("ended",()=>{URL.revokeObjectURL(o)}),s.addEventListener("error",n=>{throw console.error("Audio error:",n),URL.revokeObjectURL(o),new Error("Could not play sound")}),await s.play(),this.updateSoundCacheStatus(e.mp3,!0)}catch(t){throw t.name==="NotAllowedError"?this.showStatus("⚠ CLICK ANYWHERE TO ENABLE AUDIO ⚠","error"):this.showStatus("✗ COULD NOT PLAY SOUND ✗","error"),t}}async cacheAudioFile(e){"serviceWorker"in navigator&&navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({type:"CACHE_AUDIO",url:e})}async preCachePopularSounds(){if("serviceWorker"in navigator&&navigator.serviceWorker.controller&&this.sounds.length>0){const e=this.sounds.slice(0,20);navigator.serviceWorker.controller.postMessage({type:"CACHE_SOUNDS",sounds:e}),console.log(`Pre-caching ${e.length} popular sounds...`)}}showStatus(e,t="info"){const r=document.getElementById("status");r.textContent=e,r.className=`status show ${t}`,setTimeout(()=>{r.classList.remove("show")},3e3)}showOfflineIndicator(){document.getElementById("offline-indicator").classList.add("show")}hideOfflineIndicator(){document.getElementById("offline-indicator").classList.remove("show")}async checkForUpdates(){if(this.isOnline)try{const e=localStorage.getItem("soundboard-data-timestamp"),t=e?parseInt(e):0;Date.now()-t>36e5&&await this.loadSounds()}catch(e){console.error("Error checking for updates:",e)}}async checkCachedSounds(){if("caches"in window)try{const r=(await(await caches.open("neil-rogers-sounds-v2")).keys()).map(o=>o.url);return this.sounds.map(o=>({...o,isCached:r.some(s=>s.endsWith(o.mp3))}))}catch(e){return console.error("Error checking cached sounds:",e),this.sounds}return this.sounds}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}updateSoundCacheStatus(e,t){document.querySelectorAll(".sound-button").forEach(o=>{try{const s=JSON.parse(o.dataset.sound);s.mp3===e&&(t?(o.classList.add("cached"),o.title=`${s.artist} (Cached for offline)`,console.log("💾 UI updated: Sound cached -",e)):(o.classList.remove("cached"),o.title=s.artist))}catch(s){console.error("Error updating cache status:",s)}})}}document.addEventListener("DOMContentLoaded",()=>{new c});document.addEventListener("click",function i(){const e=window.AudioContext||window.webkitAudioContext;if(e){const t=new e;t.state==="suspended"&&t.resume()}document.removeEventListener("click",i)},{once:!0});
